// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2017 19:27:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rcaAdder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rcaAdder_vlg_sample_tst(
	c_in,
	x,
	y,
	sampler_tx
);
input  c_in;
input [3:0] x;
input [3:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(c_in or x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rcaAdder_vlg_check_tst (
	carry,
	sum,
	sampler_rx
);
input  carry;
input [3:0] sum;
input sampler_rx;

reg  carry_expected;
reg [3:0] sum_expected;

reg  carry_prev;
reg [3:0] sum_prev;

reg  carry_expected_prev;
reg [3:0] sum_expected_prev;

reg  last_carry_exp;
reg [3:0] last_sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carry_prev = carry;
	sum_prev = sum;
end

// update expected /o prevs

always @(trigger)
begin
	carry_expected_prev = carry_expected;
	sum_expected_prev = sum_expected;
end



// expected carry
initial
begin
	carry_expected = 1'bX;
end 
// expected sum[ 3 ]
initial
begin
	sum_expected[3] = 1'bX;
end 
// expected sum[ 2 ]
initial
begin
	sum_expected[2] = 1'bX;
end 
// expected sum[ 1 ]
initial
begin
	sum_expected[1] = 1'bX;
end 
// expected sum[ 0 ]
initial
begin
	sum_expected[0] = 1'bX;
end 
// generate trigger
always @(carry_expected or carry or sum_expected or sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carry = %b | expected sum = %b | ",carry_expected_prev,sum_expected_prev);
	$display("| real carry = %b | real sum = %b | ",carry_prev,sum_prev);
`endif
	if (
		( carry_expected_prev !== 1'bx ) && ( carry_prev !== carry_expected_prev )
		&& ((carry_expected_prev !== last_carry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp = carry_expected_prev;
	end
	if (
		( sum_expected_prev[0] !== 1'bx ) && ( sum_prev[0] !== sum_expected_prev[0] )
		&& ((sum_expected_prev[0] !== last_sum_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[0] = sum_expected_prev[0];
	end
	if (
		( sum_expected_prev[1] !== 1'bx ) && ( sum_prev[1] !== sum_expected_prev[1] )
		&& ((sum_expected_prev[1] !== last_sum_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[1] = sum_expected_prev[1];
	end
	if (
		( sum_expected_prev[2] !== 1'bx ) && ( sum_prev[2] !== sum_expected_prev[2] )
		&& ((sum_expected_prev[2] !== last_sum_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[2] = sum_expected_prev[2];
	end
	if (
		( sum_expected_prev[3] !== 1'bx ) && ( sum_prev[3] !== sum_expected_prev[3] )
		&& ((sum_expected_prev[3] !== last_sum_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[3] = sum_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rcaAdder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c_in;
reg [3:0] x;
reg [3:0] y;
// wires                                               
wire carry;
wire [3:0] sum;

wire sampler;                             

// assign statements (if any)                          
rcaAdder i1 (
// port map - connection between master ports and signals/registers   
	.c_in(c_in),
	.carry(carry),
	.sum(sum),
	.x(x),
	.y(y)
);

// c_in
initial
begin
	c_in = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #60000 1'b1;
	x[3] = #60000 1'b0;
	x[3] = #200000 1'b1;
	x[3] = #70000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #60000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #210000 1'b1;
	x[2] = #30000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #60000 1'b1;
	x[1] = #60000 1'b0;
	x[1] = #270000 1'b1;
	x[1] = #180000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #390000 1'b1;
	x[0] = #180000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
	y[3] = #350000 1'b1;
	y[3] = #80000 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
	y[2] = #110000 1'b1;
	y[2] = #120000 1'b0;
	y[2] = #120000 1'b1;
	y[2] = #80000 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
	y[1] = #110000 1'b1;
	y[1] = #120000 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
	y[0] = #110000 1'b1;
	y[0] = #120000 1'b0;
	y[0] = #190000 1'b1;
	y[0] = #180000 1'b0;
end 

rcaAdder_vlg_sample_tst tb_sample (
	.c_in(c_in),
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

rcaAdder_vlg_check_tst tb_out(
	.carry(carry),
	.sum(sum),
	.sampler_rx(sampler)
);
endmodule

