// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2017 19:04:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    apollo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module apollo_vlg_sample_tst(
	battery_voltage,
	sampler_tx
);
input [31:0] battery_voltage;
output sampler_tx;

reg sample;
time current_time;
always @(battery_voltage)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module apollo_vlg_check_tst (
	green_led,
	red_led,
	yellow_led,
	sampler_rx
);
input  green_led;
input  red_led;
input  yellow_led;
input sampler_rx;

reg  green_led_expected;
reg  red_led_expected;
reg  yellow_led_expected;

reg  green_led_prev;
reg  red_led_prev;
reg  yellow_led_prev;

reg  green_led_expected_prev;
reg  red_led_expected_prev;
reg  yellow_led_expected_prev;

reg  last_green_led_exp;
reg  last_red_led_exp;
reg  last_yellow_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	green_led_prev = green_led;
	red_led_prev = red_led;
	yellow_led_prev = yellow_led;
end

// update expected /o prevs

always @(trigger)
begin
	green_led_expected_prev = green_led_expected;
	red_led_expected_prev = red_led_expected;
	yellow_led_expected_prev = yellow_led_expected;
end



// expected green_led
initial
begin
	green_led_expected = 1'bX;
end 

// expected red_led
initial
begin
	red_led_expected = 1'bX;
end 

// expected yellow_led
initial
begin
	yellow_led_expected = 1'bX;
end 
// generate trigger
always @(green_led_expected or green_led or red_led_expected or red_led or yellow_led_expected or yellow_led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected green_led = %b | expected red_led = %b | expected yellow_led = %b | ",green_led_expected_prev,red_led_expected_prev,yellow_led_expected_prev);
	$display("| real green_led = %b | real red_led = %b | real yellow_led = %b | ",green_led_prev,red_led_prev,yellow_led_prev);
`endif
	if (
		( green_led_expected_prev !== 1'bx ) && ( green_led_prev !== green_led_expected_prev )
		&& ((green_led_expected_prev !== last_green_led_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_led_expected_prev);
		$display ("     Real value = %b", green_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_green_led_exp = green_led_expected_prev;
	end
	if (
		( red_led_expected_prev !== 1'bx ) && ( red_led_prev !== red_led_expected_prev )
		&& ((red_led_expected_prev !== last_red_led_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_led_expected_prev);
		$display ("     Real value = %b", red_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_red_led_exp = red_led_expected_prev;
	end
	if (
		( yellow_led_expected_prev !== 1'bx ) && ( yellow_led_prev !== yellow_led_expected_prev )
		&& ((yellow_led_expected_prev !== last_yellow_led_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellow_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellow_led_expected_prev);
		$display ("     Real value = %b", yellow_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_yellow_led_exp = yellow_led_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module apollo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] battery_voltage;
// wires                                               
wire green_led;
wire red_led;
wire yellow_led;

wire sampler;                             

// assign statements (if any)                          
apollo i1 (
// port map - connection between master ports and signals/registers   
	.battery_voltage(battery_voltage),
	.green_led(green_led),
	.red_led(red_led),
	.yellow_led(yellow_led)
);
// battery_voltage[ 31 ]
initial
begin
	battery_voltage[31] = 1'b0;
end 
// battery_voltage[ 30 ]
initial
begin
	battery_voltage[30] = 1'b0;
end 
// battery_voltage[ 29 ]
initial
begin
	battery_voltage[29] = 1'b0;
end 
// battery_voltage[ 28 ]
initial
begin
	battery_voltage[28] = 1'b0;
end 
// battery_voltage[ 27 ]
initial
begin
	battery_voltage[27] = 1'b0;
end 
// battery_voltage[ 26 ]
initial
begin
	battery_voltage[26] = 1'b0;
end 
// battery_voltage[ 25 ]
initial
begin
	battery_voltage[25] = 1'b0;
end 
// battery_voltage[ 24 ]
initial
begin
	battery_voltage[24] = 1'b0;
end 
// battery_voltage[ 23 ]
initial
begin
	battery_voltage[23] = 1'b0;
end 
// battery_voltage[ 22 ]
initial
begin
	battery_voltage[22] = 1'b0;
end 
// battery_voltage[ 21 ]
initial
begin
	battery_voltage[21] = 1'b0;
end 
// battery_voltage[ 20 ]
initial
begin
	battery_voltage[20] = 1'b0;
end 
// battery_voltage[ 19 ]
initial
begin
	battery_voltage[19] = 1'b0;
end 
// battery_voltage[ 18 ]
initial
begin
	battery_voltage[18] = 1'b0;
end 
// battery_voltage[ 17 ]
initial
begin
	battery_voltage[17] = 1'b0;
end 
// battery_voltage[ 16 ]
initial
begin
	battery_voltage[16] = 1'b0;
end 
// battery_voltage[ 15 ]
initial
begin
	battery_voltage[15] = 1'b0;
end 
// battery_voltage[ 14 ]
initial
begin
	battery_voltage[14] = 1'b0;
end 
// battery_voltage[ 13 ]
initial
begin
	battery_voltage[13] = 1'b0;
end 
// battery_voltage[ 12 ]
initial
begin
	battery_voltage[12] = 1'b0;
end 
// battery_voltage[ 11 ]
initial
begin
	battery_voltage[11] = 1'b0;
end 
// battery_voltage[ 10 ]
initial
begin
	battery_voltage[10] = 1'b0;
end 
// battery_voltage[ 9 ]
initial
begin
	battery_voltage[9] = 1'b0;
end 
// battery_voltage[ 8 ]
initial
begin
	battery_voltage[8] = 1'b0;
end 
// battery_voltage[ 7 ]
initial
begin
	battery_voltage[7] = 1'b0;
end 
// battery_voltage[ 6 ]
initial
begin
	battery_voltage[6] = 1'b0;
end 
// battery_voltage[ 5 ]
initial
begin
	battery_voltage[5] = 1'b0;
end 
// battery_voltage[ 4 ]
initial
begin
	battery_voltage[4] = 1'b0;
end 
// battery_voltage[ 3 ]
initial
begin
	repeat(6)
	begin
		battery_voltage[3] = 1'b0;
		battery_voltage[3] = #80000 1'b1;
		# 80000;
	end
	battery_voltage[3] = 1'b0;
end 
// battery_voltage[ 2 ]
initial
begin
	repeat(12)
	begin
		battery_voltage[2] = 1'b0;
		battery_voltage[2] = #40000 1'b1;
		# 40000;
	end
	battery_voltage[2] = 1'b0;
end 
// battery_voltage[ 1 ]
always
begin
	battery_voltage[1] = 1'b0;
	battery_voltage[1] = #20000 1'b1;
	#20000;
end 
// battery_voltage[ 0 ]
always
begin
	battery_voltage[0] = 1'b0;
	battery_voltage[0] = #10000 1'b1;
	#10000;
end 

apollo_vlg_sample_tst tb_sample (
	.battery_voltage(battery_voltage),
	.sampler_tx(sampler)
);

apollo_vlg_check_tst tb_out(
	.green_led(green_led),
	.red_led(red_led),
	.yellow_led(yellow_led),
	.sampler_rx(sampler)
);
endmodule

