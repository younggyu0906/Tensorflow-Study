// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2017 01:39:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_vlg_sample_tst(
	a,
	b,
	carry,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [4:0] carry;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or carry)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module adder_vlg_check_tst (
	carry,
	y_out,
	sampler_rx
);
input [4:0] carry;
input [4:0] y_out;
input sampler_rx;

reg [4:0] carry_expected;
reg [4:0] y_out_expected;

reg [4:0] carry_prev;
reg [4:0] y_out_prev;

reg [4:0] carry_expected_prev;
reg [4:0] y_out_expected_prev;

reg [4:0] last_carry_exp;
reg [4:0] last_y_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carry_prev = carry;
	y_out_prev = y_out;
end

// update expected /o prevs

always @(trigger)
begin
	carry_expected_prev = carry_expected;
	y_out_expected_prev = y_out_expected;
end


// expected y_out[ 4 ]
initial
begin
	y_out_expected[4] = 1'bX;
end 
// expected y_out[ 3 ]
initial
begin
	y_out_expected[3] = 1'bX;
end 
// expected y_out[ 2 ]
initial
begin
	y_out_expected[2] = 1'bX;
end 
// expected y_out[ 1 ]
initial
begin
	y_out_expected[1] = 1'bX;
end 
// expected y_out[ 0 ]
initial
begin
	y_out_expected[0] = 1'bX;
end 
// generate trigger
always @(carry_expected or carry or y_out_expected or y_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carry = %b | expected y_out = %b | ",carry_expected_prev,y_out_expected_prev);
	$display("| real carry = %b | real y_out = %b | ",carry_prev,y_out_prev);
`endif
	if (
		( carry_expected_prev[0] !== 1'bx ) && ( carry_prev[0] !== carry_expected_prev[0] )
		&& ((carry_expected_prev[0] !== last_carry_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[0] = carry_expected_prev[0];
	end
	if (
		( carry_expected_prev[1] !== 1'bx ) && ( carry_prev[1] !== carry_expected_prev[1] )
		&& ((carry_expected_prev[1] !== last_carry_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[1] = carry_expected_prev[1];
	end
	if (
		( carry_expected_prev[2] !== 1'bx ) && ( carry_prev[2] !== carry_expected_prev[2] )
		&& ((carry_expected_prev[2] !== last_carry_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[2] = carry_expected_prev[2];
	end
	if (
		( carry_expected_prev[3] !== 1'bx ) && ( carry_prev[3] !== carry_expected_prev[3] )
		&& ((carry_expected_prev[3] !== last_carry_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[3] = carry_expected_prev[3];
	end
	if (
		( carry_expected_prev[4] !== 1'bx ) && ( carry_prev[4] !== carry_expected_prev[4] )
		&& ((carry_expected_prev[4] !== last_carry_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp[4] = carry_expected_prev[4];
	end
	if (
		( y_out_expected_prev[0] !== 1'bx ) && ( y_out_prev[0] !== y_out_expected_prev[0] )
		&& ((y_out_expected_prev[0] !== last_y_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_out_exp[0] = y_out_expected_prev[0];
	end
	if (
		( y_out_expected_prev[1] !== 1'bx ) && ( y_out_prev[1] !== y_out_expected_prev[1] )
		&& ((y_out_expected_prev[1] !== last_y_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_out_exp[1] = y_out_expected_prev[1];
	end
	if (
		( y_out_expected_prev[2] !== 1'bx ) && ( y_out_prev[2] !== y_out_expected_prev[2] )
		&& ((y_out_expected_prev[2] !== last_y_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_out_exp[2] = y_out_expected_prev[2];
	end
	if (
		( y_out_expected_prev[3] !== 1'bx ) && ( y_out_prev[3] !== y_out_expected_prev[3] )
		&& ((y_out_expected_prev[3] !== last_y_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_out_exp[3] = y_out_expected_prev[3];
	end
	if (
		( y_out_expected_prev[4] !== 1'bx ) && ( y_out_prev[4] !== y_out_expected_prev[4] )
		&& ((y_out_expected_prev[4] !== last_y_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_out_exp[4] = y_out_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [4:0] treg_carry;
// wires                                               
wire [4:0] carry;
wire [4:0] y_out;

wire sampler;                             

// assign statements (if any)                          
assign carry = treg_carry;
adder i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.carry(carry),
	.y_out(y_out)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #20000 1'b1;
	a[2] = #90000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #20000 1'b1;
	a[1] = #90000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #20000 1'b1;
	a[0] = #90000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #70000 1'b1;
	b[3] = #110000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #70000 1'b1;
	b[2] = #110000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #70000 1'b1;
	b[1] = #110000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #70000 1'b1;
	b[0] = #110000 1'b0;
end 
// carry[ 4 ]
initial
begin
	treg_carry[4] = 1'b0;
end 
// carry[ 3 ]
initial
begin
	treg_carry[3] = 1'b0;
end 
// carry[ 2 ]
initial
begin
	treg_carry[2] = 1'b0;
end 
// carry[ 1 ]
initial
begin
	treg_carry[1] = 1'b0;
end 
// carry[ 0 ]
initial
begin
	treg_carry[0] = 1'b0;
end 

adder_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.carry(carry),
	.sampler_tx(sampler)
);

adder_vlg_check_tst tb_out(
	.carry(carry),
	.y_out(y_out),
	.sampler_rx(sampler)
);
endmodule

