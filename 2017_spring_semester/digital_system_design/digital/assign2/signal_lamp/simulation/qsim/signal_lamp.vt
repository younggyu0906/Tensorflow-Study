// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2017 23:13:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    signal_lamp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module signal_lamp_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module signal_lamp_vlg_check_tst (
	xlamp0,
	xlamp1,
	xlamp2,
	xlamp3,
	ylamp0,
	ylamp1,
	ylamp2,
	ylamp3,
	sampler_rx
);
input [4:0] xlamp0;
input [4:0] xlamp1;
input [4:0] xlamp2;
input [4:0] xlamp3;
input [4:0] ylamp0;
input [4:0] ylamp1;
input [4:0] ylamp2;
input [4:0] ylamp3;
input sampler_rx;

reg [4:0] xlamp0_expected;
reg [4:0] xlamp1_expected;
reg [4:0] xlamp2_expected;
reg [4:0] xlamp3_expected;
reg [4:0] ylamp0_expected;
reg [4:0] ylamp1_expected;
reg [4:0] ylamp2_expected;
reg [4:0] ylamp3_expected;

reg [4:0] xlamp0_prev;
reg [4:0] xlamp1_prev;
reg [4:0] xlamp2_prev;
reg [4:0] xlamp3_prev;
reg [4:0] ylamp0_prev;
reg [4:0] ylamp1_prev;
reg [4:0] ylamp2_prev;
reg [4:0] ylamp3_prev;

reg [4:0] xlamp0_expected_prev;
reg [4:0] xlamp1_expected_prev;
reg [4:0] xlamp2_expected_prev;
reg [4:0] xlamp3_expected_prev;
reg [4:0] ylamp0_expected_prev;
reg [4:0] ylamp1_expected_prev;
reg [4:0] ylamp2_expected_prev;
reg [4:0] ylamp3_expected_prev;

reg [4:0] last_xlamp0_exp;
reg [4:0] last_xlamp1_exp;
reg [4:0] last_xlamp2_exp;
reg [4:0] last_xlamp3_exp;
reg [4:0] last_ylamp0_exp;
reg [4:0] last_ylamp1_exp;
reg [4:0] last_ylamp2_exp;
reg [4:0] last_ylamp3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	xlamp0_prev = xlamp0;
	xlamp1_prev = xlamp1;
	xlamp2_prev = xlamp2;
	xlamp3_prev = xlamp3;
	ylamp0_prev = ylamp0;
	ylamp1_prev = ylamp1;
	ylamp2_prev = ylamp2;
	ylamp3_prev = ylamp3;
end

// update expected /o prevs

always @(trigger)
begin
	xlamp0_expected_prev = xlamp0_expected;
	xlamp1_expected_prev = xlamp1_expected;
	xlamp2_expected_prev = xlamp2_expected;
	xlamp3_expected_prev = xlamp3_expected;
	ylamp0_expected_prev = ylamp0_expected;
	ylamp1_expected_prev = ylamp1_expected;
	ylamp2_expected_prev = ylamp2_expected;
	ylamp3_expected_prev = ylamp3_expected;
end


// expected xlamp0[ 4 ]
initial
begin
	xlamp0_expected[4] = 1'bX;
end 
// expected xlamp0[ 3 ]
initial
begin
	xlamp0_expected[3] = 1'bX;
end 
// expected xlamp0[ 2 ]
initial
begin
	xlamp0_expected[2] = 1'bX;
end 
// expected xlamp0[ 1 ]
initial
begin
	xlamp0_expected[1] = 1'bX;
end 
// expected xlamp0[ 0 ]
initial
begin
	xlamp0_expected[0] = 1'bX;
end 
// expected xlamp1[ 4 ]
initial
begin
	xlamp1_expected[4] = 1'bX;
end 
// expected xlamp1[ 3 ]
initial
begin
	xlamp1_expected[3] = 1'bX;
end 
// expected xlamp1[ 2 ]
initial
begin
	xlamp1_expected[2] = 1'bX;
end 
// expected xlamp1[ 1 ]
initial
begin
	xlamp1_expected[1] = 1'bX;
end 
// expected xlamp1[ 0 ]
initial
begin
	xlamp1_expected[0] = 1'bX;
end 
// expected xlamp2[ 4 ]
initial
begin
	xlamp2_expected[4] = 1'bX;
end 
// expected xlamp2[ 3 ]
initial
begin
	xlamp2_expected[3] = 1'bX;
end 
// expected xlamp2[ 2 ]
initial
begin
	xlamp2_expected[2] = 1'bX;
end 
// expected xlamp2[ 1 ]
initial
begin
	xlamp2_expected[1] = 1'bX;
end 
// expected xlamp2[ 0 ]
initial
begin
	xlamp2_expected[0] = 1'bX;
end 
// expected xlamp3[ 4 ]
initial
begin
	xlamp3_expected[4] = 1'bX;
end 
// expected xlamp3[ 3 ]
initial
begin
	xlamp3_expected[3] = 1'bX;
end 
// expected xlamp3[ 2 ]
initial
begin
	xlamp3_expected[2] = 1'bX;
end 
// expected xlamp3[ 1 ]
initial
begin
	xlamp3_expected[1] = 1'bX;
end 
// expected xlamp3[ 0 ]
initial
begin
	xlamp3_expected[0] = 1'bX;
end 
// expected ylamp0[ 4 ]
initial
begin
	ylamp0_expected[4] = 1'bX;
end 
// expected ylamp0[ 3 ]
initial
begin
	ylamp0_expected[3] = 1'bX;
end 
// expected ylamp0[ 2 ]
initial
begin
	ylamp0_expected[2] = 1'bX;
end 
// expected ylamp0[ 1 ]
initial
begin
	ylamp0_expected[1] = 1'bX;
end 
// expected ylamp0[ 0 ]
initial
begin
	ylamp0_expected[0] = 1'bX;
end 
// expected ylamp1[ 4 ]
initial
begin
	ylamp1_expected[4] = 1'bX;
end 
// expected ylamp1[ 3 ]
initial
begin
	ylamp1_expected[3] = 1'bX;
end 
// expected ylamp1[ 2 ]
initial
begin
	ylamp1_expected[2] = 1'bX;
end 
// expected ylamp1[ 1 ]
initial
begin
	ylamp1_expected[1] = 1'bX;
end 
// expected ylamp1[ 0 ]
initial
begin
	ylamp1_expected[0] = 1'bX;
end 
// expected ylamp2[ 4 ]
initial
begin
	ylamp2_expected[4] = 1'bX;
end 
// expected ylamp2[ 3 ]
initial
begin
	ylamp2_expected[3] = 1'bX;
end 
// expected ylamp2[ 2 ]
initial
begin
	ylamp2_expected[2] = 1'bX;
end 
// expected ylamp2[ 1 ]
initial
begin
	ylamp2_expected[1] = 1'bX;
end 
// expected ylamp2[ 0 ]
initial
begin
	ylamp2_expected[0] = 1'bX;
end 
// expected ylamp3[ 4 ]
initial
begin
	ylamp3_expected[4] = 1'bX;
end 
// expected ylamp3[ 3 ]
initial
begin
	ylamp3_expected[3] = 1'bX;
end 
// expected ylamp3[ 2 ]
initial
begin
	ylamp3_expected[2] = 1'bX;
end 
// expected ylamp3[ 1 ]
initial
begin
	ylamp3_expected[1] = 1'bX;
end 
// expected ylamp3[ 0 ]
initial
begin
	ylamp3_expected[0] = 1'bX;
end 
// generate trigger
always @(xlamp0_expected or xlamp0 or xlamp1_expected or xlamp1 or xlamp2_expected or xlamp2 or xlamp3_expected or xlamp3 or ylamp0_expected or ylamp0 or ylamp1_expected or ylamp1 or ylamp2_expected or ylamp2 or ylamp3_expected or ylamp3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected xlamp0 = %b | expected xlamp1 = %b | expected xlamp2 = %b | expected xlamp3 = %b | expected ylamp0 = %b | expected ylamp1 = %b | expected ylamp2 = %b | expected ylamp3 = %b | ",xlamp0_expected_prev,xlamp1_expected_prev,xlamp2_expected_prev,xlamp3_expected_prev,ylamp0_expected_prev,ylamp1_expected_prev,ylamp2_expected_prev,ylamp3_expected_prev);
	$display("| real xlamp0 = %b | real xlamp1 = %b | real xlamp2 = %b | real xlamp3 = %b | real ylamp0 = %b | real ylamp1 = %b | real ylamp2 = %b | real ylamp3 = %b | ",xlamp0_prev,xlamp1_prev,xlamp2_prev,xlamp3_prev,ylamp0_prev,ylamp1_prev,ylamp2_prev,ylamp3_prev);
`endif
	if (
		( xlamp0_expected_prev[0] !== 1'bx ) && ( xlamp0_prev[0] !== xlamp0_expected_prev[0] )
		&& ((xlamp0_expected_prev[0] !== last_xlamp0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp0_expected_prev);
		$display ("     Real value = %b", xlamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_xlamp0_exp[0] = xlamp0_expected_prev[0];
	end
	if (
		( xlamp0_expected_prev[1] !== 1'bx ) && ( xlamp0_prev[1] !== xlamp0_expected_prev[1] )
		&& ((xlamp0_expected_prev[1] !== last_xlamp0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp0_expected_prev);
		$display ("     Real value = %b", xlamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_xlamp0_exp[1] = xlamp0_expected_prev[1];
	end
	if (
		( xlamp0_expected_prev[2] !== 1'bx ) && ( xlamp0_prev[2] !== xlamp0_expected_prev[2] )
		&& ((xlamp0_expected_prev[2] !== last_xlamp0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp0_expected_prev);
		$display ("     Real value = %b", xlamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_xlamp0_exp[2] = xlamp0_expected_prev[2];
	end
	if (
		( xlamp0_expected_prev[3] !== 1'bx ) && ( xlamp0_prev[3] !== xlamp0_expected_prev[3] )
		&& ((xlamp0_expected_prev[3] !== last_xlamp0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp0_expected_prev);
		$display ("     Real value = %b", xlamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_xlamp0_exp[3] = xlamp0_expected_prev[3];
	end
	if (
		( xlamp0_expected_prev[4] !== 1'bx ) && ( xlamp0_prev[4] !== xlamp0_expected_prev[4] )
		&& ((xlamp0_expected_prev[4] !== last_xlamp0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp0_expected_prev);
		$display ("     Real value = %b", xlamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_xlamp0_exp[4] = xlamp0_expected_prev[4];
	end
	if (
		( xlamp1_expected_prev[0] !== 1'bx ) && ( xlamp1_prev[0] !== xlamp1_expected_prev[0] )
		&& ((xlamp1_expected_prev[0] !== last_xlamp1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp1_expected_prev);
		$display ("     Real value = %b", xlamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_xlamp1_exp[0] = xlamp1_expected_prev[0];
	end
	if (
		( xlamp1_expected_prev[1] !== 1'bx ) && ( xlamp1_prev[1] !== xlamp1_expected_prev[1] )
		&& ((xlamp1_expected_prev[1] !== last_xlamp1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp1_expected_prev);
		$display ("     Real value = %b", xlamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_xlamp1_exp[1] = xlamp1_expected_prev[1];
	end
	if (
		( xlamp1_expected_prev[2] !== 1'bx ) && ( xlamp1_prev[2] !== xlamp1_expected_prev[2] )
		&& ((xlamp1_expected_prev[2] !== last_xlamp1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp1_expected_prev);
		$display ("     Real value = %b", xlamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_xlamp1_exp[2] = xlamp1_expected_prev[2];
	end
	if (
		( xlamp1_expected_prev[3] !== 1'bx ) && ( xlamp1_prev[3] !== xlamp1_expected_prev[3] )
		&& ((xlamp1_expected_prev[3] !== last_xlamp1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp1_expected_prev);
		$display ("     Real value = %b", xlamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_xlamp1_exp[3] = xlamp1_expected_prev[3];
	end
	if (
		( xlamp1_expected_prev[4] !== 1'bx ) && ( xlamp1_prev[4] !== xlamp1_expected_prev[4] )
		&& ((xlamp1_expected_prev[4] !== last_xlamp1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp1_expected_prev);
		$display ("     Real value = %b", xlamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_xlamp1_exp[4] = xlamp1_expected_prev[4];
	end
	if (
		( xlamp2_expected_prev[0] !== 1'bx ) && ( xlamp2_prev[0] !== xlamp2_expected_prev[0] )
		&& ((xlamp2_expected_prev[0] !== last_xlamp2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp2_expected_prev);
		$display ("     Real value = %b", xlamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xlamp2_exp[0] = xlamp2_expected_prev[0];
	end
	if (
		( xlamp2_expected_prev[1] !== 1'bx ) && ( xlamp2_prev[1] !== xlamp2_expected_prev[1] )
		&& ((xlamp2_expected_prev[1] !== last_xlamp2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp2_expected_prev);
		$display ("     Real value = %b", xlamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xlamp2_exp[1] = xlamp2_expected_prev[1];
	end
	if (
		( xlamp2_expected_prev[2] !== 1'bx ) && ( xlamp2_prev[2] !== xlamp2_expected_prev[2] )
		&& ((xlamp2_expected_prev[2] !== last_xlamp2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp2_expected_prev);
		$display ("     Real value = %b", xlamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xlamp2_exp[2] = xlamp2_expected_prev[2];
	end
	if (
		( xlamp2_expected_prev[3] !== 1'bx ) && ( xlamp2_prev[3] !== xlamp2_expected_prev[3] )
		&& ((xlamp2_expected_prev[3] !== last_xlamp2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp2_expected_prev);
		$display ("     Real value = %b", xlamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xlamp2_exp[3] = xlamp2_expected_prev[3];
	end
	if (
		( xlamp2_expected_prev[4] !== 1'bx ) && ( xlamp2_prev[4] !== xlamp2_expected_prev[4] )
		&& ((xlamp2_expected_prev[4] !== last_xlamp2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp2_expected_prev);
		$display ("     Real value = %b", xlamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xlamp2_exp[4] = xlamp2_expected_prev[4];
	end
	if (
		( xlamp3_expected_prev[0] !== 1'bx ) && ( xlamp3_prev[0] !== xlamp3_expected_prev[0] )
		&& ((xlamp3_expected_prev[0] !== last_xlamp3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp3_expected_prev);
		$display ("     Real value = %b", xlamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xlamp3_exp[0] = xlamp3_expected_prev[0];
	end
	if (
		( xlamp3_expected_prev[1] !== 1'bx ) && ( xlamp3_prev[1] !== xlamp3_expected_prev[1] )
		&& ((xlamp3_expected_prev[1] !== last_xlamp3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp3_expected_prev);
		$display ("     Real value = %b", xlamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xlamp3_exp[1] = xlamp3_expected_prev[1];
	end
	if (
		( xlamp3_expected_prev[2] !== 1'bx ) && ( xlamp3_prev[2] !== xlamp3_expected_prev[2] )
		&& ((xlamp3_expected_prev[2] !== last_xlamp3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp3_expected_prev);
		$display ("     Real value = %b", xlamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xlamp3_exp[2] = xlamp3_expected_prev[2];
	end
	if (
		( xlamp3_expected_prev[3] !== 1'bx ) && ( xlamp3_prev[3] !== xlamp3_expected_prev[3] )
		&& ((xlamp3_expected_prev[3] !== last_xlamp3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp3_expected_prev);
		$display ("     Real value = %b", xlamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xlamp3_exp[3] = xlamp3_expected_prev[3];
	end
	if (
		( xlamp3_expected_prev[4] !== 1'bx ) && ( xlamp3_prev[4] !== xlamp3_expected_prev[4] )
		&& ((xlamp3_expected_prev[4] !== last_xlamp3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xlamp3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xlamp3_expected_prev);
		$display ("     Real value = %b", xlamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xlamp3_exp[4] = xlamp3_expected_prev[4];
	end
	if (
		( ylamp0_expected_prev[0] !== 1'bx ) && ( ylamp0_prev[0] !== ylamp0_expected_prev[0] )
		&& ((ylamp0_expected_prev[0] !== last_ylamp0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp0_expected_prev);
		$display ("     Real value = %b", ylamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ylamp0_exp[0] = ylamp0_expected_prev[0];
	end
	if (
		( ylamp0_expected_prev[1] !== 1'bx ) && ( ylamp0_prev[1] !== ylamp0_expected_prev[1] )
		&& ((ylamp0_expected_prev[1] !== last_ylamp0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp0_expected_prev);
		$display ("     Real value = %b", ylamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ylamp0_exp[1] = ylamp0_expected_prev[1];
	end
	if (
		( ylamp0_expected_prev[2] !== 1'bx ) && ( ylamp0_prev[2] !== ylamp0_expected_prev[2] )
		&& ((ylamp0_expected_prev[2] !== last_ylamp0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp0_expected_prev);
		$display ("     Real value = %b", ylamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ylamp0_exp[2] = ylamp0_expected_prev[2];
	end
	if (
		( ylamp0_expected_prev[3] !== 1'bx ) && ( ylamp0_prev[3] !== ylamp0_expected_prev[3] )
		&& ((ylamp0_expected_prev[3] !== last_ylamp0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp0_expected_prev);
		$display ("     Real value = %b", ylamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ylamp0_exp[3] = ylamp0_expected_prev[3];
	end
	if (
		( ylamp0_expected_prev[4] !== 1'bx ) && ( ylamp0_prev[4] !== ylamp0_expected_prev[4] )
		&& ((ylamp0_expected_prev[4] !== last_ylamp0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp0_expected_prev);
		$display ("     Real value = %b", ylamp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ylamp0_exp[4] = ylamp0_expected_prev[4];
	end
	if (
		( ylamp1_expected_prev[0] !== 1'bx ) && ( ylamp1_prev[0] !== ylamp1_expected_prev[0] )
		&& ((ylamp1_expected_prev[0] !== last_ylamp1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp1_expected_prev);
		$display ("     Real value = %b", ylamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ylamp1_exp[0] = ylamp1_expected_prev[0];
	end
	if (
		( ylamp1_expected_prev[1] !== 1'bx ) && ( ylamp1_prev[1] !== ylamp1_expected_prev[1] )
		&& ((ylamp1_expected_prev[1] !== last_ylamp1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp1_expected_prev);
		$display ("     Real value = %b", ylamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ylamp1_exp[1] = ylamp1_expected_prev[1];
	end
	if (
		( ylamp1_expected_prev[2] !== 1'bx ) && ( ylamp1_prev[2] !== ylamp1_expected_prev[2] )
		&& ((ylamp1_expected_prev[2] !== last_ylamp1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp1_expected_prev);
		$display ("     Real value = %b", ylamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ylamp1_exp[2] = ylamp1_expected_prev[2];
	end
	if (
		( ylamp1_expected_prev[3] !== 1'bx ) && ( ylamp1_prev[3] !== ylamp1_expected_prev[3] )
		&& ((ylamp1_expected_prev[3] !== last_ylamp1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp1_expected_prev);
		$display ("     Real value = %b", ylamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ylamp1_exp[3] = ylamp1_expected_prev[3];
	end
	if (
		( ylamp1_expected_prev[4] !== 1'bx ) && ( ylamp1_prev[4] !== ylamp1_expected_prev[4] )
		&& ((ylamp1_expected_prev[4] !== last_ylamp1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp1_expected_prev);
		$display ("     Real value = %b", ylamp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ylamp1_exp[4] = ylamp1_expected_prev[4];
	end
	if (
		( ylamp2_expected_prev[0] !== 1'bx ) && ( ylamp2_prev[0] !== ylamp2_expected_prev[0] )
		&& ((ylamp2_expected_prev[0] !== last_ylamp2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp2_expected_prev);
		$display ("     Real value = %b", ylamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ylamp2_exp[0] = ylamp2_expected_prev[0];
	end
	if (
		( ylamp2_expected_prev[1] !== 1'bx ) && ( ylamp2_prev[1] !== ylamp2_expected_prev[1] )
		&& ((ylamp2_expected_prev[1] !== last_ylamp2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp2_expected_prev);
		$display ("     Real value = %b", ylamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ylamp2_exp[1] = ylamp2_expected_prev[1];
	end
	if (
		( ylamp2_expected_prev[2] !== 1'bx ) && ( ylamp2_prev[2] !== ylamp2_expected_prev[2] )
		&& ((ylamp2_expected_prev[2] !== last_ylamp2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp2_expected_prev);
		$display ("     Real value = %b", ylamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ylamp2_exp[2] = ylamp2_expected_prev[2];
	end
	if (
		( ylamp2_expected_prev[3] !== 1'bx ) && ( ylamp2_prev[3] !== ylamp2_expected_prev[3] )
		&& ((ylamp2_expected_prev[3] !== last_ylamp2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp2_expected_prev);
		$display ("     Real value = %b", ylamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ylamp2_exp[3] = ylamp2_expected_prev[3];
	end
	if (
		( ylamp2_expected_prev[4] !== 1'bx ) && ( ylamp2_prev[4] !== ylamp2_expected_prev[4] )
		&& ((ylamp2_expected_prev[4] !== last_ylamp2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp2_expected_prev);
		$display ("     Real value = %b", ylamp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ylamp2_exp[4] = ylamp2_expected_prev[4];
	end
	if (
		( ylamp3_expected_prev[0] !== 1'bx ) && ( ylamp3_prev[0] !== ylamp3_expected_prev[0] )
		&& ((ylamp3_expected_prev[0] !== last_ylamp3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp3_expected_prev);
		$display ("     Real value = %b", ylamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ylamp3_exp[0] = ylamp3_expected_prev[0];
	end
	if (
		( ylamp3_expected_prev[1] !== 1'bx ) && ( ylamp3_prev[1] !== ylamp3_expected_prev[1] )
		&& ((ylamp3_expected_prev[1] !== last_ylamp3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp3_expected_prev);
		$display ("     Real value = %b", ylamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ylamp3_exp[1] = ylamp3_expected_prev[1];
	end
	if (
		( ylamp3_expected_prev[2] !== 1'bx ) && ( ylamp3_prev[2] !== ylamp3_expected_prev[2] )
		&& ((ylamp3_expected_prev[2] !== last_ylamp3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp3_expected_prev);
		$display ("     Real value = %b", ylamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ylamp3_exp[2] = ylamp3_expected_prev[2];
	end
	if (
		( ylamp3_expected_prev[3] !== 1'bx ) && ( ylamp3_prev[3] !== ylamp3_expected_prev[3] )
		&& ((ylamp3_expected_prev[3] !== last_ylamp3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp3_expected_prev);
		$display ("     Real value = %b", ylamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ylamp3_exp[3] = ylamp3_expected_prev[3];
	end
	if (
		( ylamp3_expected_prev[4] !== 1'bx ) && ( ylamp3_prev[4] !== ylamp3_expected_prev[4] )
		&& ((ylamp3_expected_prev[4] !== last_ylamp3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ylamp3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ylamp3_expected_prev);
		$display ("     Real value = %b", ylamp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ylamp3_exp[4] = ylamp3_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module signal_lamp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [4:0] xlamp0;
wire [4:0] xlamp1;
wire [4:0] xlamp2;
wire [4:0] xlamp3;
wire [4:0] ylamp0;
wire [4:0] ylamp1;
wire [4:0] ylamp2;
wire [4:0] ylamp3;

wire sampler;                             

// assign statements (if any)                          
signal_lamp i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reset(reset),
	.xlamp0(xlamp0),
	.xlamp1(xlamp1),
	.xlamp2(xlamp2),
	.xlamp3(xlamp3),
	.ylamp0(ylamp0),
	.ylamp1(ylamp1),
	.ylamp2(ylamp2),
	.ylamp3(ylamp3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #100000 1'b1;
	reset = #20000 1'b0;
end 

signal_lamp_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

signal_lamp_vlg_check_tst tb_out(
	.xlamp0(xlamp0),
	.xlamp1(xlamp1),
	.xlamp2(xlamp2),
	.xlamp3(xlamp3),
	.ylamp0(ylamp0),
	.ylamp1(ylamp1),
	.ylamp2(ylamp2),
	.ylamp3(ylamp3),
	.sampler_rx(sampler)
);
endmodule

