// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2017 12:41:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    kygmin1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module kygmin1_vlg_sample_tst(
	a,
	b,
	y_out,
	sampler_tx
);
input [2:0] a;
input [2:0] b;
input [2:0] y_out;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or y_out)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module kygmin1_vlg_check_tst (
	seg1,
	seg2,
	seg3,
	segsel1,
	segsel2,
	segsel3,
	y_out,
	sampler_rx
);
input [6:0] seg1;
input [6:0] seg2;
input [6:0] seg3;
input  segsel1;
input  segsel2;
input  segsel3;
input [2:0] y_out;
input sampler_rx;

reg [6:0] seg1_expected;
reg [6:0] seg2_expected;
reg [6:0] seg3_expected;
reg  segsel1_expected;
reg  segsel2_expected;
reg  segsel3_expected;
reg [2:0] y_out_expected;

reg [6:0] seg1_prev;
reg [6:0] seg2_prev;
reg [6:0] seg3_prev;
reg  segsel1_prev;
reg  segsel2_prev;
reg  segsel3_prev;
reg [2:0] y_out_prev;

reg [6:0] seg1_expected_prev;
reg [6:0] seg2_expected_prev;
reg [6:0] seg3_expected_prev;
reg  segsel1_expected_prev;
reg  segsel2_expected_prev;
reg  segsel3_expected_prev;
reg [2:0] y_out_expected_prev;

reg [6:0] last_seg1_exp;
reg [6:0] last_seg2_exp;
reg [6:0] last_seg3_exp;
reg  last_segsel1_exp;
reg  last_segsel2_exp;
reg  last_segsel3_exp;
reg [2:0] last_y_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	seg1_prev = seg1;
	seg2_prev = seg2;
	seg3_prev = seg3;
	segsel1_prev = segsel1;
	segsel2_prev = segsel2;
	segsel3_prev = segsel3;
	y_out_prev = y_out;
end

// update expected /o prevs

always @(trigger)
begin
	seg1_expected_prev = seg1_expected;
	seg2_expected_prev = seg2_expected;
	seg3_expected_prev = seg3_expected;
	segsel1_expected_prev = segsel1_expected;
	segsel2_expected_prev = segsel2_expected;
	segsel3_expected_prev = segsel3_expected;
	y_out_expected_prev = y_out_expected;
end


// expected seg1[ 6 ]
initial
begin
	seg1_expected[6] = 1'bX;
end 
// expected seg1[ 5 ]
initial
begin
	seg1_expected[5] = 1'bX;
end 
// expected seg1[ 4 ]
initial
begin
	seg1_expected[4] = 1'bX;
end 
// expected seg1[ 3 ]
initial
begin
	seg1_expected[3] = 1'bX;
end 
// expected seg1[ 2 ]
initial
begin
	seg1_expected[2] = 1'bX;
end 
// expected seg1[ 1 ]
initial
begin
	seg1_expected[1] = 1'bX;
end 
// expected seg1[ 0 ]
initial
begin
	seg1_expected[0] = 1'bX;
end 
// expected seg2[ 6 ]
initial
begin
	seg2_expected[6] = 1'bX;
end 
// expected seg2[ 5 ]
initial
begin
	seg2_expected[5] = 1'bX;
end 
// expected seg2[ 4 ]
initial
begin
	seg2_expected[4] = 1'bX;
end 
// expected seg2[ 3 ]
initial
begin
	seg2_expected[3] = 1'bX;
end 
// expected seg2[ 2 ]
initial
begin
	seg2_expected[2] = 1'bX;
end 
// expected seg2[ 1 ]
initial
begin
	seg2_expected[1] = 1'bX;
end 
// expected seg2[ 0 ]
initial
begin
	seg2_expected[0] = 1'bX;
end 
// expected seg3[ 6 ]
initial
begin
	seg3_expected[6] = 1'bX;
end 
// expected seg3[ 5 ]
initial
begin
	seg3_expected[5] = 1'bX;
end 
// expected seg3[ 4 ]
initial
begin
	seg3_expected[4] = 1'bX;
end 
// expected seg3[ 3 ]
initial
begin
	seg3_expected[3] = 1'bX;
end 
// expected seg3[ 2 ]
initial
begin
	seg3_expected[2] = 1'bX;
end 
// expected seg3[ 1 ]
initial
begin
	seg3_expected[1] = 1'bX;
end 
// expected seg3[ 0 ]
initial
begin
	seg3_expected[0] = 1'bX;
end 

// expected segsel1
initial
begin
	segsel1_expected = 1'b1;
end 

// expected segsel2
initial
begin
	segsel2_expected = 1'b1;
end 

// expected segsel3
initial
begin
	segsel3_expected = 1'b1;
end 
// generate trigger
always @(seg1_expected or seg1 or seg2_expected or seg2 or seg3_expected or seg3 or segsel1_expected or segsel1 or segsel2_expected or segsel2 or segsel3_expected or segsel3 or y_out_expected or y_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected seg1 = %b | expected seg2 = %b | expected seg3 = %b | expected segsel1 = %b | expected segsel2 = %b | expected segsel3 = %b | expected y_out = %b | ",seg1_expected_prev,seg2_expected_prev,seg3_expected_prev,segsel1_expected_prev,segsel2_expected_prev,segsel3_expected_prev,y_out_expected_prev);
	$display("| real seg1 = %b | real seg2 = %b | real seg3 = %b | real segsel1 = %b | real segsel2 = %b | real segsel3 = %b | real y_out = %b | ",seg1_prev,seg2_prev,seg3_prev,segsel1_prev,segsel2_prev,segsel3_prev,y_out_prev);
`endif
	if (
		( seg1_expected_prev[0] !== 1'bx ) && ( seg1_prev[0] !== seg1_expected_prev[0] )
		&& ((seg1_expected_prev[0] !== last_seg1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[0] = seg1_expected_prev[0];
	end
	if (
		( seg1_expected_prev[1] !== 1'bx ) && ( seg1_prev[1] !== seg1_expected_prev[1] )
		&& ((seg1_expected_prev[1] !== last_seg1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[1] = seg1_expected_prev[1];
	end
	if (
		( seg1_expected_prev[2] !== 1'bx ) && ( seg1_prev[2] !== seg1_expected_prev[2] )
		&& ((seg1_expected_prev[2] !== last_seg1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[2] = seg1_expected_prev[2];
	end
	if (
		( seg1_expected_prev[3] !== 1'bx ) && ( seg1_prev[3] !== seg1_expected_prev[3] )
		&& ((seg1_expected_prev[3] !== last_seg1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[3] = seg1_expected_prev[3];
	end
	if (
		( seg1_expected_prev[4] !== 1'bx ) && ( seg1_prev[4] !== seg1_expected_prev[4] )
		&& ((seg1_expected_prev[4] !== last_seg1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[4] = seg1_expected_prev[4];
	end
	if (
		( seg1_expected_prev[5] !== 1'bx ) && ( seg1_prev[5] !== seg1_expected_prev[5] )
		&& ((seg1_expected_prev[5] !== last_seg1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[5] = seg1_expected_prev[5];
	end
	if (
		( seg1_expected_prev[6] !== 1'bx ) && ( seg1_prev[6] !== seg1_expected_prev[6] )
		&& ((seg1_expected_prev[6] !== last_seg1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_seg1_exp[6] = seg1_expected_prev[6];
	end
	if (
		( seg2_expected_prev[0] !== 1'bx ) && ( seg2_prev[0] !== seg2_expected_prev[0] )
		&& ((seg2_expected_prev[0] !== last_seg2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[0] = seg2_expected_prev[0];
	end
	if (
		( seg2_expected_prev[1] !== 1'bx ) && ( seg2_prev[1] !== seg2_expected_prev[1] )
		&& ((seg2_expected_prev[1] !== last_seg2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[1] = seg2_expected_prev[1];
	end
	if (
		( seg2_expected_prev[2] !== 1'bx ) && ( seg2_prev[2] !== seg2_expected_prev[2] )
		&& ((seg2_expected_prev[2] !== last_seg2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[2] = seg2_expected_prev[2];
	end
	if (
		( seg2_expected_prev[3] !== 1'bx ) && ( seg2_prev[3] !== seg2_expected_prev[3] )
		&& ((seg2_expected_prev[3] !== last_seg2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[3] = seg2_expected_prev[3];
	end
	if (
		( seg2_expected_prev[4] !== 1'bx ) && ( seg2_prev[4] !== seg2_expected_prev[4] )
		&& ((seg2_expected_prev[4] !== last_seg2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[4] = seg2_expected_prev[4];
	end
	if (
		( seg2_expected_prev[5] !== 1'bx ) && ( seg2_prev[5] !== seg2_expected_prev[5] )
		&& ((seg2_expected_prev[5] !== last_seg2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[5] = seg2_expected_prev[5];
	end
	if (
		( seg2_expected_prev[6] !== 1'bx ) && ( seg2_prev[6] !== seg2_expected_prev[6] )
		&& ((seg2_expected_prev[6] !== last_seg2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg2_exp[6] = seg2_expected_prev[6];
	end
	if (
		( seg3_expected_prev[0] !== 1'bx ) && ( seg3_prev[0] !== seg3_expected_prev[0] )
		&& ((seg3_expected_prev[0] !== last_seg3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[0] = seg3_expected_prev[0];
	end
	if (
		( seg3_expected_prev[1] !== 1'bx ) && ( seg3_prev[1] !== seg3_expected_prev[1] )
		&& ((seg3_expected_prev[1] !== last_seg3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[1] = seg3_expected_prev[1];
	end
	if (
		( seg3_expected_prev[2] !== 1'bx ) && ( seg3_prev[2] !== seg3_expected_prev[2] )
		&& ((seg3_expected_prev[2] !== last_seg3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[2] = seg3_expected_prev[2];
	end
	if (
		( seg3_expected_prev[3] !== 1'bx ) && ( seg3_prev[3] !== seg3_expected_prev[3] )
		&& ((seg3_expected_prev[3] !== last_seg3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[3] = seg3_expected_prev[3];
	end
	if (
		( seg3_expected_prev[4] !== 1'bx ) && ( seg3_prev[4] !== seg3_expected_prev[4] )
		&& ((seg3_expected_prev[4] !== last_seg3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[4] = seg3_expected_prev[4];
	end
	if (
		( seg3_expected_prev[5] !== 1'bx ) && ( seg3_prev[5] !== seg3_expected_prev[5] )
		&& ((seg3_expected_prev[5] !== last_seg3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[5] = seg3_expected_prev[5];
	end
	if (
		( seg3_expected_prev[6] !== 1'bx ) && ( seg3_prev[6] !== seg3_expected_prev[6] )
		&& ((seg3_expected_prev[6] !== last_seg3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg3_exp[6] = seg3_expected_prev[6];
	end
	if (
		( segsel1_expected_prev !== 1'bx ) && ( segsel1_prev !== segsel1_expected_prev )
		&& ((segsel1_expected_prev !== last_segsel1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segsel1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segsel1_expected_prev);
		$display ("     Real value = %b", segsel1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segsel1_exp = segsel1_expected_prev;
	end
	if (
		( segsel2_expected_prev !== 1'bx ) && ( segsel2_prev !== segsel2_expected_prev )
		&& ((segsel2_expected_prev !== last_segsel2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segsel2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segsel2_expected_prev);
		$display ("     Real value = %b", segsel2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segsel2_exp = segsel2_expected_prev;
	end
	if (
		( segsel3_expected_prev !== 1'bx ) && ( segsel3_prev !== segsel3_expected_prev )
		&& ((segsel3_expected_prev !== last_segsel3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segsel3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segsel3_expected_prev);
		$display ("     Real value = %b", segsel3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segsel3_exp = segsel3_expected_prev;
	end
	if (
		( y_out_expected_prev[0] !== 1'bx ) && ( y_out_prev[0] !== y_out_expected_prev[0] )
		&& ((y_out_expected_prev[0] !== last_y_out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y_out_exp[0] = y_out_expected_prev[0];
	end
	if (
		( y_out_expected_prev[1] !== 1'bx ) && ( y_out_prev[1] !== y_out_expected_prev[1] )
		&& ((y_out_expected_prev[1] !== last_y_out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y_out_exp[1] = y_out_expected_prev[1];
	end
	if (
		( y_out_expected_prev[2] !== 1'bx ) && ( y_out_prev[2] !== y_out_expected_prev[2] )
		&& ((y_out_expected_prev[2] !== last_y_out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y_out_exp[2] = y_out_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module kygmin1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] a;
reg [2:0] b;
reg [2:0] treg_y_out;
// wires                                               
wire [6:0] seg1;
wire [6:0] seg2;
wire [6:0] seg3;
wire segsel1;
wire segsel2;
wire segsel3;
wire [2:0] y_out;

wire sampler;                             

// assign statements (if any)                          
assign y_out = treg_y_out;
kygmin1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.segsel1(segsel1),
	.segsel2(segsel2),
	.segsel3(segsel3),
	.y_out(y_out)
);
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #100000 1'b1;
	a[2] = #120000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	a[1] = #120000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #150000 1'b1;
	b[1] = #200000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #150000 1'b1;
	b[0] = #200000 1'b0;
end 
// y_out[ 2 ]
initial
begin
	treg_y_out[2] = 1'bZ;
end 
// y_out[ 1 ]
initial
begin
	treg_y_out[1] = 1'bZ;
end 
// y_out[ 0 ]
initial
begin
	treg_y_out[0] = 1'bZ;
end 

kygmin1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.y_out(y_out),
	.sampler_tx(sampler)
);

kygmin1_vlg_check_tst tb_out(
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.segsel1(segsel1),
	.segsel2(segsel2),
	.segsel3(segsel3),
	.y_out(y_out),
	.sampler_rx(sampler)
);
endmodule

