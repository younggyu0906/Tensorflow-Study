// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2017 02:48:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adder_16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_16_vlg_sample_tst(
	x,
	y,
	sampler_tx
);
input [15:0] x;
input [15:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module adder_16_vlg_check_tst (
	add_out,
	carry_out,
	overflow_check,
	sampler_rx
);
input [15:0] add_out;
input  carry_out;
input  overflow_check;
input sampler_rx;

reg [15:0] add_out_expected;
reg  carry_out_expected;
reg  overflow_check_expected;

reg [15:0] add_out_prev;
reg  carry_out_prev;
reg  overflow_check_prev;

reg [15:0] add_out_expected_prev;
reg  carry_out_expected_prev;
reg  overflow_check_expected_prev;

reg [15:0] last_add_out_exp;
reg  last_carry_out_exp;
reg  last_overflow_check_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	add_out_prev = add_out;
	carry_out_prev = carry_out;
	overflow_check_prev = overflow_check;
end

// update expected /o prevs

always @(trigger)
begin
	add_out_expected_prev = add_out_expected;
	carry_out_expected_prev = carry_out_expected;
	overflow_check_expected_prev = overflow_check_expected;
end


// expected add_out[ 15 ]
initial
begin
	add_out_expected[15] = 1'bX;
end 
// expected add_out[ 14 ]
initial
begin
	add_out_expected[14] = 1'bX;
end 
// expected add_out[ 13 ]
initial
begin
	add_out_expected[13] = 1'bX;
end 
// expected add_out[ 12 ]
initial
begin
	add_out_expected[12] = 1'bX;
end 
// expected add_out[ 11 ]
initial
begin
	add_out_expected[11] = 1'bX;
end 
// expected add_out[ 10 ]
initial
begin
	add_out_expected[10] = 1'bX;
end 
// expected add_out[ 9 ]
initial
begin
	add_out_expected[9] = 1'bX;
end 
// expected add_out[ 8 ]
initial
begin
	add_out_expected[8] = 1'bX;
end 
// expected add_out[ 7 ]
initial
begin
	add_out_expected[7] = 1'bX;
end 
// expected add_out[ 6 ]
initial
begin
	add_out_expected[6] = 1'bX;
end 
// expected add_out[ 5 ]
initial
begin
	add_out_expected[5] = 1'bX;
end 
// expected add_out[ 4 ]
initial
begin
	add_out_expected[4] = 1'bX;
end 
// expected add_out[ 3 ]
initial
begin
	add_out_expected[3] = 1'bX;
end 
// expected add_out[ 2 ]
initial
begin
	add_out_expected[2] = 1'bX;
end 
// expected add_out[ 1 ]
initial
begin
	add_out_expected[1] = 1'bX;
end 
// expected add_out[ 0 ]
initial
begin
	add_out_expected[0] = 1'bX;
end 

// expected carry_out
initial
begin
	carry_out_expected = 1'bX;
end 

// expected overflow_check
initial
begin
	overflow_check_expected = 1'bX;
end 
// generate trigger
always @(add_out_expected or add_out or carry_out_expected or carry_out or overflow_check_expected or overflow_check)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected add_out = %b | expected carry_out = %b | expected overflow_check = %b | ",add_out_expected_prev,carry_out_expected_prev,overflow_check_expected_prev);
	$display("| real add_out = %b | real carry_out = %b | real overflow_check = %b | ",add_out_prev,carry_out_prev,overflow_check_prev);
`endif
	if (
		( add_out_expected_prev[0] !== 1'bx ) && ( add_out_prev[0] !== add_out_expected_prev[0] )
		&& ((add_out_expected_prev[0] !== last_add_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[0] = add_out_expected_prev[0];
	end
	if (
		( add_out_expected_prev[1] !== 1'bx ) && ( add_out_prev[1] !== add_out_expected_prev[1] )
		&& ((add_out_expected_prev[1] !== last_add_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[1] = add_out_expected_prev[1];
	end
	if (
		( add_out_expected_prev[2] !== 1'bx ) && ( add_out_prev[2] !== add_out_expected_prev[2] )
		&& ((add_out_expected_prev[2] !== last_add_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[2] = add_out_expected_prev[2];
	end
	if (
		( add_out_expected_prev[3] !== 1'bx ) && ( add_out_prev[3] !== add_out_expected_prev[3] )
		&& ((add_out_expected_prev[3] !== last_add_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[3] = add_out_expected_prev[3];
	end
	if (
		( add_out_expected_prev[4] !== 1'bx ) && ( add_out_prev[4] !== add_out_expected_prev[4] )
		&& ((add_out_expected_prev[4] !== last_add_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[4] = add_out_expected_prev[4];
	end
	if (
		( add_out_expected_prev[5] !== 1'bx ) && ( add_out_prev[5] !== add_out_expected_prev[5] )
		&& ((add_out_expected_prev[5] !== last_add_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[5] = add_out_expected_prev[5];
	end
	if (
		( add_out_expected_prev[6] !== 1'bx ) && ( add_out_prev[6] !== add_out_expected_prev[6] )
		&& ((add_out_expected_prev[6] !== last_add_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[6] = add_out_expected_prev[6];
	end
	if (
		( add_out_expected_prev[7] !== 1'bx ) && ( add_out_prev[7] !== add_out_expected_prev[7] )
		&& ((add_out_expected_prev[7] !== last_add_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[7] = add_out_expected_prev[7];
	end
	if (
		( add_out_expected_prev[8] !== 1'bx ) && ( add_out_prev[8] !== add_out_expected_prev[8] )
		&& ((add_out_expected_prev[8] !== last_add_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[8] = add_out_expected_prev[8];
	end
	if (
		( add_out_expected_prev[9] !== 1'bx ) && ( add_out_prev[9] !== add_out_expected_prev[9] )
		&& ((add_out_expected_prev[9] !== last_add_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[9] = add_out_expected_prev[9];
	end
	if (
		( add_out_expected_prev[10] !== 1'bx ) && ( add_out_prev[10] !== add_out_expected_prev[10] )
		&& ((add_out_expected_prev[10] !== last_add_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[10] = add_out_expected_prev[10];
	end
	if (
		( add_out_expected_prev[11] !== 1'bx ) && ( add_out_prev[11] !== add_out_expected_prev[11] )
		&& ((add_out_expected_prev[11] !== last_add_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[11] = add_out_expected_prev[11];
	end
	if (
		( add_out_expected_prev[12] !== 1'bx ) && ( add_out_prev[12] !== add_out_expected_prev[12] )
		&& ((add_out_expected_prev[12] !== last_add_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[12] = add_out_expected_prev[12];
	end
	if (
		( add_out_expected_prev[13] !== 1'bx ) && ( add_out_prev[13] !== add_out_expected_prev[13] )
		&& ((add_out_expected_prev[13] !== last_add_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[13] = add_out_expected_prev[13];
	end
	if (
		( add_out_expected_prev[14] !== 1'bx ) && ( add_out_prev[14] !== add_out_expected_prev[14] )
		&& ((add_out_expected_prev[14] !== last_add_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[14] = add_out_expected_prev[14];
	end
	if (
		( add_out_expected_prev[15] !== 1'bx ) && ( add_out_prev[15] !== add_out_expected_prev[15] )
		&& ((add_out_expected_prev[15] !== last_add_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_out_expected_prev);
		$display ("     Real value = %b", add_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_out_exp[15] = add_out_expected_prev[15];
	end
	if (
		( carry_out_expected_prev !== 1'bx ) && ( carry_out_prev !== carry_out_expected_prev )
		&& ((carry_out_expected_prev !== last_carry_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_out_expected_prev);
		$display ("     Real value = %b", carry_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_carry_out_exp = carry_out_expected_prev;
	end
	if (
		( overflow_check_expected_prev !== 1'bx ) && ( overflow_check_prev !== overflow_check_expected_prev )
		&& ((overflow_check_expected_prev !== last_overflow_check_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow_check :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_check_expected_prev);
		$display ("     Real value = %b", overflow_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_overflow_check_exp = overflow_check_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module adder_16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] x;
reg [15:0] y;
// wires                                               
wire [15:0] add_out;
wire carry_out;
wire overflow_check;

wire sampler;                             

// assign statements (if any)                          
adder_16 i1 (
// port map - connection between master ports and signals/registers   
	.add_out(add_out),
	.carry_out(carry_out),
	.overflow_check(overflow_check),
	.x(x),
	.y(y)
);
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
	x[15] = #310000 1'b1;
	x[15] = #170000 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
	x[14] = #10000 1'b1;
	x[14] = #40000 1'b0;
	x[14] = #30000 1'b1;
	x[14] = #70000 1'b0;
	x[14] = #160000 1'b1;
	x[14] = #170000 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
	x[13] = #10000 1'b1;
	x[13] = #40000 1'b0;
	x[13] = #260000 1'b1;
	x[13] = #170000 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
	x[12] = #10000 1'b1;
	x[12] = #40000 1'b0;
	x[12] = #260000 1'b1;
	x[12] = #170000 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
	x[11] = #10000 1'b1;
	x[11] = #40000 1'b0;
	x[11] = #260000 1'b1;
	x[11] = #170000 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
	x[10] = #10000 1'b1;
	x[10] = #40000 1'b0;
	x[10] = #260000 1'b1;
	x[10] = #170000 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
	x[9] = #10000 1'b1;
	x[9] = #40000 1'b0;
	x[9] = #260000 1'b1;
	x[9] = #170000 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
	x[8] = #10000 1'b1;
	x[8] = #40000 1'b0;
	x[8] = #260000 1'b1;
	x[8] = #170000 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
	x[7] = #10000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #260000 1'b1;
	x[7] = #170000 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
	x[6] = #10000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #260000 1'b1;
	x[6] = #170000 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
	x[5] = #10000 1'b1;
	x[5] = #40000 1'b0;
	x[5] = #260000 1'b1;
	x[5] = #170000 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
	x[4] = #10000 1'b1;
	x[4] = #40000 1'b0;
	x[4] = #260000 1'b1;
	x[4] = #170000 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #260000 1'b1;
	x[3] = #170000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #110000 1'b1;
	x[2] = #90000 1'b0;
	x[2] = #60000 1'b1;
	x[2] = #170000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #110000 1'b1;
	x[1] = #90000 1'b0;
	x[1] = #60000 1'b1;
	x[1] = #170000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #40000 1'b0;
	x[0] = #260000 1'b1;
	x[0] = #170000 1'b0;
end 
// y[ 15 ]
initial
begin
	y[15] = 1'b0;
	y[15] = #310000 1'b1;
	y[15] = #170000 1'b0;
end 
// y[ 14 ]
initial
begin
	y[14] = 1'b0;
	y[14] = #10000 1'b1;
	y[14] = #40000 1'b0;
	y[14] = #30000 1'b1;
	y[14] = #70000 1'b0;
	y[14] = #160000 1'b1;
	y[14] = #170000 1'b0;
end 
// y[ 13 ]
initial
begin
	y[13] = 1'b0;
	y[13] = #10000 1'b1;
	y[13] = #40000 1'b0;
	y[13] = #260000 1'b1;
	y[13] = #170000 1'b0;
end 
// y[ 12 ]
initial
begin
	y[12] = 1'b0;
	y[12] = #10000 1'b1;
	y[12] = #40000 1'b0;
	y[12] = #260000 1'b1;
	y[12] = #170000 1'b0;
end 
// y[ 11 ]
initial
begin
	y[11] = 1'b0;
	y[11] = #10000 1'b1;
	y[11] = #40000 1'b0;
	y[11] = #260000 1'b1;
	y[11] = #170000 1'b0;
end 
// y[ 10 ]
initial
begin
	y[10] = 1'b0;
	y[10] = #10000 1'b1;
	y[10] = #40000 1'b0;
	y[10] = #260000 1'b1;
	y[10] = #170000 1'b0;
end 
// y[ 9 ]
initial
begin
	y[9] = 1'b0;
	y[9] = #10000 1'b1;
	y[9] = #40000 1'b0;
	y[9] = #110000 1'b1;
	y[9] = #90000 1'b0;
	y[9] = #60000 1'b1;
	y[9] = #170000 1'b0;
end 
// y[ 8 ]
initial
begin
	y[8] = 1'b0;
	y[8] = #10000 1'b1;
	y[8] = #40000 1'b0;
	y[8] = #110000 1'b1;
	y[8] = #90000 1'b0;
	y[8] = #60000 1'b1;
	y[8] = #170000 1'b0;
end 
// y[ 7 ]
initial
begin
	y[7] = 1'b0;
	y[7] = #10000 1'b1;
	y[7] = #40000 1'b0;
	y[7] = #110000 1'b1;
	y[7] = #90000 1'b0;
	y[7] = #60000 1'b1;
	y[7] = #170000 1'b0;
end 
// y[ 6 ]
initial
begin
	y[6] = 1'b0;
	y[6] = #10000 1'b1;
	y[6] = #40000 1'b0;
	y[6] = #110000 1'b1;
	y[6] = #90000 1'b0;
	y[6] = #60000 1'b1;
	y[6] = #170000 1'b0;
end 
// y[ 5 ]
initial
begin
	y[5] = 1'b0;
	y[5] = #10000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #110000 1'b1;
	y[5] = #90000 1'b0;
	y[5] = #60000 1'b1;
	y[5] = #170000 1'b0;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
	y[4] = #10000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #260000 1'b1;
	y[4] = #170000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
	y[3] = #10000 1'b1;
	y[3] = #40000 1'b0;
	y[3] = #260000 1'b1;
	y[3] = #170000 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
	y[2] = #10000 1'b1;
	y[2] = #40000 1'b0;
	y[2] = #260000 1'b1;
	y[2] = #170000 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
	y[1] = #10000 1'b1;
	y[1] = #40000 1'b0;
	y[1] = #260000 1'b1;
	y[1] = #170000 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
	y[0] = #10000 1'b1;
	y[0] = #40000 1'b0;
	y[0] = #260000 1'b1;
	y[0] = #170000 1'b0;
end 

adder_16_vlg_sample_tst tb_sample (
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

adder_16_vlg_check_tst tb_out(
	.add_out(add_out),
	.carry_out(carry_out),
	.overflow_check(overflow_check),
	.sampler_rx(sampler)
);
endmodule

