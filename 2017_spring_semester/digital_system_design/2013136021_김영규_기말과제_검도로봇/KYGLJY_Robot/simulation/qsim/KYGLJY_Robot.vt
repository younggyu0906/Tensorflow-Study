// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2017 14:45:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    KYGLJY_Robot
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module KYGLJY_Robot_vlg_sample_tst(
	clk,
	HS_Echo,
	IR1_input,
	IR2_input,
	sampler_tx
);
input  clk;
input  HS_Echo;
input  IR1_input;
input  IR2_input;
output sampler_tx;

reg sample;
time current_time;
always @(clk or HS_Echo or IR1_input or IR2_input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module KYGLJY_Robot_vlg_check_tst (
	HS_Trigger,
	SBM_output,
	STM1_output,
	STM2_output,
	sampler_rx
);
input  HS_Trigger;
input  SBM_output;
input [3:0] STM1_output;
input [3:0] STM2_output;
input sampler_rx;

reg  HS_Trigger_expected;
reg  SBM_output_expected;
reg [3:0] STM1_output_expected;
reg [3:0] STM2_output_expected;

reg  HS_Trigger_prev;
reg  SBM_output_prev;
reg [3:0] STM1_output_prev;
reg [3:0] STM2_output_prev;

reg  HS_Trigger_expected_prev;
reg  SBM_output_expected_prev;
reg [3:0] STM1_output_expected_prev;
reg [3:0] STM2_output_expected_prev;

reg  last_HS_Trigger_exp;
reg  last_SBM_output_exp;
reg [3:0] last_STM1_output_exp;
reg [3:0] last_STM2_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	HS_Trigger_prev = HS_Trigger;
	SBM_output_prev = SBM_output;
	STM1_output_prev = STM1_output;
	STM2_output_prev = STM2_output;
end

// update expected /o prevs

always @(trigger)
begin
	HS_Trigger_expected_prev = HS_Trigger_expected;
	SBM_output_expected_prev = SBM_output_expected;
	STM1_output_expected_prev = STM1_output_expected;
	STM2_output_expected_prev = STM2_output_expected;
end



// expected HS_Trigger
initial
begin
	HS_Trigger_expected = 1'bX;
end 

// expected SBM_output
initial
begin
	SBM_output_expected = 1'bX;
end 
// expected STM1_output[ 3 ]
initial
begin
	STM1_output_expected[3] = 1'bX;
end 
// expected STM1_output[ 2 ]
initial
begin
	STM1_output_expected[2] = 1'bX;
end 
// expected STM1_output[ 1 ]
initial
begin
	STM1_output_expected[1] = 1'bX;
end 
// expected STM1_output[ 0 ]
initial
begin
	STM1_output_expected[0] = 1'bX;
end 
// expected STM2_output[ 3 ]
initial
begin
	STM2_output_expected[3] = 1'bX;
end 
// expected STM2_output[ 2 ]
initial
begin
	STM2_output_expected[2] = 1'bX;
end 
// expected STM2_output[ 1 ]
initial
begin
	STM2_output_expected[1] = 1'bX;
end 
// expected STM2_output[ 0 ]
initial
begin
	STM2_output_expected[0] = 1'bX;
end 
// generate trigger
always @(HS_Trigger_expected or HS_Trigger or SBM_output_expected or SBM_output or STM1_output_expected or STM1_output or STM2_output_expected or STM2_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HS_Trigger = %b | expected SBM_output = %b | expected STM1_output = %b | expected STM2_output = %b | ",HS_Trigger_expected_prev,SBM_output_expected_prev,STM1_output_expected_prev,STM2_output_expected_prev);
	$display("| real HS_Trigger = %b | real SBM_output = %b | real STM1_output = %b | real STM2_output = %b | ",HS_Trigger_prev,SBM_output_prev,STM1_output_prev,STM2_output_prev);
`endif
	if (
		( HS_Trigger_expected_prev !== 1'bx ) && ( HS_Trigger_prev !== HS_Trigger_expected_prev )
		&& ((HS_Trigger_expected_prev !== last_HS_Trigger_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HS_Trigger :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HS_Trigger_expected_prev);
		$display ("     Real value = %b", HS_Trigger_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HS_Trigger_exp = HS_Trigger_expected_prev;
	end
	if (
		( SBM_output_expected_prev !== 1'bx ) && ( SBM_output_prev !== SBM_output_expected_prev )
		&& ((SBM_output_expected_prev !== last_SBM_output_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SBM_output :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SBM_output_expected_prev);
		$display ("     Real value = %b", SBM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SBM_output_exp = SBM_output_expected_prev;
	end
	if (
		( STM1_output_expected_prev[0] !== 1'bx ) && ( STM1_output_prev[0] !== STM1_output_expected_prev[0] )
		&& ((STM1_output_expected_prev[0] !== last_STM1_output_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM1_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM1_output_expected_prev);
		$display ("     Real value = %b", STM1_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STM1_output_exp[0] = STM1_output_expected_prev[0];
	end
	if (
		( STM1_output_expected_prev[1] !== 1'bx ) && ( STM1_output_prev[1] !== STM1_output_expected_prev[1] )
		&& ((STM1_output_expected_prev[1] !== last_STM1_output_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM1_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM1_output_expected_prev);
		$display ("     Real value = %b", STM1_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STM1_output_exp[1] = STM1_output_expected_prev[1];
	end
	if (
		( STM1_output_expected_prev[2] !== 1'bx ) && ( STM1_output_prev[2] !== STM1_output_expected_prev[2] )
		&& ((STM1_output_expected_prev[2] !== last_STM1_output_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM1_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM1_output_expected_prev);
		$display ("     Real value = %b", STM1_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STM1_output_exp[2] = STM1_output_expected_prev[2];
	end
	if (
		( STM1_output_expected_prev[3] !== 1'bx ) && ( STM1_output_prev[3] !== STM1_output_expected_prev[3] )
		&& ((STM1_output_expected_prev[3] !== last_STM1_output_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM1_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM1_output_expected_prev);
		$display ("     Real value = %b", STM1_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STM1_output_exp[3] = STM1_output_expected_prev[3];
	end
	if (
		( STM2_output_expected_prev[0] !== 1'bx ) && ( STM2_output_prev[0] !== STM2_output_expected_prev[0] )
		&& ((STM2_output_expected_prev[0] !== last_STM2_output_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM2_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM2_output_expected_prev);
		$display ("     Real value = %b", STM2_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_STM2_output_exp[0] = STM2_output_expected_prev[0];
	end
	if (
		( STM2_output_expected_prev[1] !== 1'bx ) && ( STM2_output_prev[1] !== STM2_output_expected_prev[1] )
		&& ((STM2_output_expected_prev[1] !== last_STM2_output_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM2_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM2_output_expected_prev);
		$display ("     Real value = %b", STM2_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_STM2_output_exp[1] = STM2_output_expected_prev[1];
	end
	if (
		( STM2_output_expected_prev[2] !== 1'bx ) && ( STM2_output_prev[2] !== STM2_output_expected_prev[2] )
		&& ((STM2_output_expected_prev[2] !== last_STM2_output_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM2_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM2_output_expected_prev);
		$display ("     Real value = %b", STM2_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_STM2_output_exp[2] = STM2_output_expected_prev[2];
	end
	if (
		( STM2_output_expected_prev[3] !== 1'bx ) && ( STM2_output_prev[3] !== STM2_output_expected_prev[3] )
		&& ((STM2_output_expected_prev[3] !== last_STM2_output_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STM2_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STM2_output_expected_prev);
		$display ("     Real value = %b", STM2_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_STM2_output_exp[3] = STM2_output_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module KYGLJY_Robot_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg HS_Echo;
reg IR1_input;
reg IR2_input;
// wires                                               
wire HS_Trigger;
wire SBM_output;
wire [3:0] STM1_output;
wire [3:0] STM2_output;

wire sampler;                             

// assign statements (if any)                          
KYGLJY_Robot i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.HS_Echo(HS_Echo),
	.HS_Trigger(HS_Trigger),
	.IR1_input(IR1_input),
	.IR2_input(IR2_input),
	.SBM_output(SBM_output),
	.STM1_output(STM1_output),
	.STM2_output(STM2_output)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// HS_Echo
initial
begin
	HS_Echo = 1'b0;
	HS_Echo = #10000 1'b1;
	HS_Echo = #710000 1'b0;
end 

// IR1_input
initial
begin
	IR1_input = 1'b0;
	IR1_input = #30000 1'b1;
	IR1_input = #540000 1'b0;
end 

// IR2_input
initial
begin
	IR2_input = 1'b0;
	IR2_input = #30000 1'b1;
	IR2_input = #540000 1'b0;
end 

KYGLJY_Robot_vlg_sample_tst tb_sample (
	.clk(clk),
	.HS_Echo(HS_Echo),
	.IR1_input(IR1_input),
	.IR2_input(IR2_input),
	.sampler_tx(sampler)
);

KYGLJY_Robot_vlg_check_tst tb_out(
	.HS_Trigger(HS_Trigger),
	.SBM_output(SBM_output),
	.STM1_output(STM1_output),
	.STM2_output(STM2_output),
	.sampler_rx(sampler)
);
endmodule

